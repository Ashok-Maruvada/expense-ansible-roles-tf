- name: disable default nodejs
  ansible.builtin.command: dnf module disable nodejs -y

- name: enable nodejs:20
  ansible.builtin.command: dnf module enable nodejs:20 -y

- name: install nodejs and mysql
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: latest
  loop:
  - nodejs
  - mysql

- name: creating user expense
  ansible.builtin.user:
    name: expense

- name: Run app pre-requisites
  tags:
  - deployment
  ansible.builtin.import_role:
    name: common
    tasks_from: app-pre-req

# - name: Create app directory
#   ansible.builtin.file:
#     path: /app
#     state: directory

# - name: Download the application code 
#   ansible.builtin.get_url:
#     url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
#     dest: /tmp/backend.zip

# - name: Unarchive a file that is already on the remote machine
#   ansible.builtin.unarchive:
#     src: /tmp/backend.zip
#     dest: /app
#     remote_src: yes # to tell machine, take the source file from remote machine as we downloaded in last step

- name: install npm
  ansible.builtin.command: npm install
  args:
    chdir: /app

- name: Copy backend service
  ansible.builtin.template:
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service

- name: daemon-reload
  ansible.builtin.systemd_service:
    daemon_reload: true

- name: enable the backend service
  ansible.builtin.service:
    name: backend
    enabled: yes

- name: install python mysql dependencies
  ansible.builtin.pip:
    name:
    - PyMySQL
    - cryptography # in order to use password in command-line
    executable: pip3.9 # pip3.11 if python version is 3.11

- name: import the data into mysql
  community.mysql.mysql_db:
    login_user: root
    login_password: "{{ login_password }}"
    login_host: "{{ login_host }}"
    target: /app/schema/backend.sql
    state: import
    name: all

- name: restart backend service
  tags:
  - deployment
  ansible.builtin.service:
    name: backend
    state: restarted